<!--
    - Policies are applied in the order they appear.
    - Position <base/> inside a section to inherit policies from the outer scope.
    - Comments within policies are not preserved.
-->
<!-- Add policies as children to the <inbound>, <outbound>, <backend>, and <on-error> elements -->
<policies>
    <!-- Throttle, authorize, validate, cache, or transform the requests -->
    <inbound>
        <base />
        <set-variable name="route-to-ai-sentry" value="{{route-to-ai-sentry}}" />
        <set-variable name="ai-sentry" value="@((string)context.Variables["route-to-ai-sentry"])" />
        <set-variable name="ai-sentry-callling-user" value="@{
        var jwtToken = (context.Request.Headers != null) ? context.Request.Headers.GetValueOrDefault("Authorization","").AsJwt() : null;
        var unique_name = jwtToken?.Claims.GetValueOrDefault("unique_name") ?? "unknown";
        string first10Chars = originalString.Substring(0, 10);
        return first10Chars;
     }" />
        <set-variable name="correlation-id" value="@(context.Request.Headers.GetValueOrDefault("x-correlation-id", Guid.NewGuid().ToString()))" />
        <set-header name="ai-sentry-calling-user" exists-action="override">
            <value>@((string)context.Variables.GetValueOrDefault("ai-sentry-callling-user"))</value>
        </set-header>
        <trace source="Global APIM Policy" severity="information">
            <message>@(String.Format("{0} | {1}", context.Api.Name, context.Variables["correlation-id"]))</message>
            <metadata name="correlation-id" value="@((string)context.Variables["correlation-id"])" />
        </trace>
        <rate-limit-by-key calls="300" renewal-period="15" counter-key="@(context.Request.Headers.GetValueOrDefault("api-key", "default-value"))" />
        <choose>
            <when condition="@((String)context.Variables["ai-sentry"]=="true")">
                <!-- Route to openai via AI-Sentry -->
                <!-- Add Ai-sentry specific header -->
                <set-header name="ai-sentry-consumer" exists-action="override">
                    <value>arian-test-caller</value>
                </set-header>
                <set-header name="ai-sentry-log-level" exists-action="override">
                    <value>COMPLETE</value>
                </set-header>
                <set-header name="Ai-Sentry-Backend-Pool" exists-action="override">
                    <value>pool1</value>
                </set-header>
                <set-header name="ai-sentry-adapters" exists-action="override">
                    <value>["SampleApiRequestTransformer"]</value>
                </set-header>
                <set-header name="x-aisentry-correlation" exists-action="override">
                    <value>@((String)context.Variables["correlation-id"])</value>
                </set-header>
                <set-backend-service backend-id="be-aisentry" />
            </when>
            <otherwise>
                <!-- bypass Ai-Sentry and go straight to openAI backend -->
                <set-backend-service backend-id="be-openai" />
            </otherwise>
        </choose>
        <cors allow-credentials="false">
            <allowed-origins>
                <origin>*</origin>
            </allowed-origins>
            <allowed-methods>
                <method>GET</method>
                <method>POST</method>
            </allowed-methods>
            <allowed-headers>
                <header>api-key</header>
                <header>content-type</header>
            </allowed-headers>
        </cors>
    </inbound>
    <!-- Control if and how the requests are forwarded to services  -->
    <backend>
        <base />
    </backend>
    <!-- Customize the responses -->
    <outbound>
        <base />
    </outbound>
    <!-- Handle exceptions and customize error responses  -->
    <on-error>
        <base />
    </on-error>
</policies>